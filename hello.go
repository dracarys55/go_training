package main // 如果是要可被執行的話，就要使用 main，有些是直接給其他程式或其他人使用時，就不需要 main
import "fmt" // 載入內建的 fmt 封包，用來做基本的輸入輸出

func main(){
	fmt.Println("Hello world")
	fmt.Println('a')
	 // Data_var() 公開函數以大寫命名
	 Basic_io()
}

// 了解 go mod （類似 node moudles


// Print

// Print 函數將它的參數連接成一個字符串，然後輸出到標準輸出（通常是終端或命令行界面）。
// 參數之間不會自動添加空格。
// 輸出後不會添加換行符，所以如果你連續調用 Print，輸出會在同一行上連接起來。
// Printf

// Printf 函數提供了格式化輸出。你可以使用格式化的動詞（如 %s、%d、%v 等）來指定每個參數應該如何顯示。
// 這非常類似於 C 語言中的 printf 函數。
// 使用格式化字符串作為第一個參數，後面跟著一個或多個參數，這些參數將替換格式化字符串中對應的格式化動詞。
// Println
// ln = line 的意思

// Println 函數也將參數連接成一個字符串，但它會在參數之間自動插入空格，並在輸出結束後添加一個換行符。
// 這使得 Println 非常適合快速列印值，同時保持它們之間的分隔，並在每次調用後開始新的一行。

// 總之，你會選擇 Print 當你想有更精細的控制輸出但不需要格式化的時候；
// 選擇 Printf 當你需要根據特定的格式模板輸出文字的時候；而 Println 適用於快速、簡單地列印信息，且每次調用後都會開始新行。